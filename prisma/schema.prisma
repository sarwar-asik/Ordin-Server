generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model test {
  id   String @id @default(uuid())
  name String
  user Int
}

// ! user model //

model User {
  id        String   @id @default(uuid())
  name      String
  password  String
  email     String   @unique
  role      Role     @default(user)
  contact   String
  img       String
  createdAt DateTime @default(now())

  updatedAt  DateTime   @updatedAt
  services   Service[]
  usersCarts UserCart[]
  bookings   Booking[]
  payments   Payment[]
  review     Review[]
  blogs      Blog[]
}

enum Role {
  user
  admin
  super_admin
}

//! Service Category 
model Categories {
  id        String    @id @default(uuid())
  title     String    @unique
  img       String
  details   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]
}

//! Service model 
model Service {
  id          String        @id @default(uuid())
  title       String        @unique
  details     String
  price       String
  address     String
  contact     String
  img         String
  serviceTime DateTime?
  serviceDate DateTime?
  status      serviceStatus @default(upcoming)
  categoryId  String
  category    Categories    @relation(fields: [categoryId], references: [id])
  publisherId String
  publisher   User          @relation(fields: [publisherId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userCarts   UserCart[]
  bookings    Booking[]
  payments    Payment[]
  reviews     Review[]

  @@unique([title, price])
}

enum serviceStatus {
  upcoming
  available
  sold
}

model UserCart {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, serviceId])
}

model Booking {
  id            String         @id @default(uuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  serviceId     String
  service       Service        @relation(fields: [serviceId], references: [id])
  totalService  Int            @default(1)
  paymentStatus PaymentStatus? @default(pending)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([userId, serviceId])
}

enum PaymentStatus {
  pending
  reject
  success
}

model Payment {
  id            String         @id @default(uuid())
  paymentDate   DateTime       @default(now())
  paymentStatus PaymentStatus?
  serviceId     String
  service       Service        @relation(fields: [serviceId], references: [id])
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Review {
  id          String   @id @default(uuid())
  reviews     String?
  rating      Int
  suggestions String?
  comments    String?
  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Blog {
  id            String   @id @default(uuid())
  title         String
  content       String
  author        String
  img           String
  portal        String
  publishedTime DateTime
  postBy        String
  user          User     @relation(fields: [postBy], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model FAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// ! Payment //

